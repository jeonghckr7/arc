{"version":3,"sources":["Home.js","View.js","firebase.js","board.js","App.js","serviceWorker.js","index.js"],"names":["Home","viewData","1","name","description","2","View","no","match","params","view","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","IdBoard","id","idboard","console","log","useEffect","a","axios","get","cors_api_url","result","html","data","$","cheerio","load","find","each","i","gall_no","children","text","trim","gall_writer","gall_date","Date","now","postsRef","ref","once","snapshot","exists","orderByChild","equalTo","on","val","gall_id","push","wr_11","wr_datetime","fetchData","ClientsDisplay","useState","clients","setClients","handleChildAdded","client","key","msg","handleChildRemoved","filter","limitToLast","off","reverse","map","iddata","moment","format","Board","history","path","component","to","url","exact","render","App","pathname","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.822c1686.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <h1>홈</h1>\r\n      <p>이곳은 홈이에요. 가장 먼저 보여지는 페이지죠.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\n\r\n// 프로필에서 사용 할 데이터\r\nconst viewData = {\r\n  1: {\r\n    name: '김민준',\r\n    description:\r\n      'Frontend Engineer @ Laftel Inc. 재밌는 것만 골라서 하는 개발자'\r\n  },\r\n  2: {\r\n    name: '홍길동',\r\n    description: '전래동화의 주인공'\r\n  }\r\n};\r\n\r\nconst View = ({ match }) => {\r\n  // 파라미터를 받아올 땐 match 안에 들어있는 params 값을 참조합니다.\r\n  const { no } = match.params;\r\n  const view = viewData[no];\r\n  if (!view) {\r\n    return <div>존재하지 않는 유저입니다.</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <h3>\r\n        {no}({view.name})\r\n      </h3>\r\n      <p>{view.description}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default View;","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBLHYeag273-F8L_funDb_8iUZO7BGZZW8\",\r\n    authDomain: \"chat-app-55e32.firebaseapp.com\",\r\n    databaseURL: \"https://chat-app-55e32.firebaseio.com\",\r\n    projectId: \"chat-app-55e32\",\r\n    storageBucket: \"chat-app-55e32.appspot.com\",\r\n    messagingSenderId: \"485337347226\",\r\n};\r\n\r\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\r\nexport const db = firebaseApp.database();","import React, { useState, useEffect } from 'react';\r\nimport { Link, Route, useLocation } from 'react-router-dom';\r\nimport View from './View';\r\nimport { db, firebaseApp } from './firebase';\r\nimport axios from 'axios';\r\nimport cheerio from 'cheerio';\r\nimport moment from 'moment';\r\n\r\nconst Board = ({ match, history }) => {\r\n  const {id} = match.params;\r\n\r\n  return (\r\n    <div>\r\n      <h3>인터넷방송</h3>\r\n      \r\n      <Route path={`${match.path}/:no`} component={View} />\r\n\r\n      <ul>\r\n        {/*{viewData.map(({ id, name }) => (\r\n          <li key={id}>\r\n            <Link to={`${match.url}/${id}`}>{name}</Link>\r\n          </li>\r\n        ))}\r\n        */}\r\n        <li>\r\n          <Link to={`${match.url}/1`}>velopert</Link>\r\n        </li>\r\n        <li>\r\n          <Link to={`${match.url}/2`}>gildong</Link>\r\n          link state로 넘겨준 id 값은 {id}\r\n        </li>\r\n      </ul>\r\n\r\n      <Route\r\n        path=\"/ib_new1\"\r\n        exact\r\n        render={() => <div>유저를 선택해주세요.</div>}\r\n      />\r\n\r\n        <IdBoard id={id}/>\r\n        <ClientsDisplay/>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction IdBoard(id) {\r\n    const idboard = id.id;\r\n    console.log(\"IdBoard boardid: \" + idboard);\r\n    useEffect(() => {\r\n      async function fetchData() {\r\n        // eslint-disable-next-line react-hooks/rules-of-hooks\r\n        var cors_api_url = 'https://cors-anywhere.herokuapp.com/';\r\n        const result = await axios.get(cors_api_url + 'https://gall.dcinside.com/board/lists/?id=' + idboard + '&exception_mode=recommend');\r\n        const html = result.data;\r\n        const $ = cheerio.load(html);\r\n        var results = $('table.gall_list').find('tr.us-post')\r\n        \r\n        results.each(function (i, result) {\r\n          var gall_no = $(result).children('td.gall_num').text().trim();\r\n          var gall_writer = $(result).children('td.gall_writer').text().trim();\r\n          var gall_date = $(result).children('td.gall_date').text().trim();\r\n\r\n          console.log(\"gall_no:\" + gall_no);\r\n          console.log(\"gall_writer:\" + gall_writer);\r\n          console.log(\"gall_date:\" + gall_date);\r\n          \r\n          console.log(\"db.Timestamp:\" + Date.now());\r\n          const postsRef = db.ref(\"board\");\r\n          postsRef.once(\"value\", function(snapshot) {\r\n            if (snapshot.exists()) {\r\n              console.log(\"데이타가 있습니다.\")\r\n              \r\n              postsRef.orderByChild(\"wr_11\").equalTo(gall_no).on(\"child_added\", function(snapshot) {\r\n                if (snapshot.val().gall_id === idboard){\r\n                  console.log(\"데이타가 있습니다. exists!\", snapshot.val());\r\n                  //  } else {   \r\n                } else {\r\n                  console.log(\"데이타가 없습니다. exists!\", snapshot.val());\r\n                }\r\n              }); \r\n            } else {\r\n              console.log(\"데이타가 없습니다.\")\r\n              postsRef.push({\r\n                        gall_id: idboard,\r\n                        wr_11: gall_no,\r\n                        wr_datetime: Date.now(),\r\n              });\r\n\r\n            }\r\n          });\r\n          //postsRef.orderByChild(\"wr_11\").equalTo(gall_no).on(\"child_added\")\r\n          //.then (function(snapshot) {\r\n          //  if (snapshot.val().gall_id === idboard){\r\n          //    console.log(\"exists!\", snapshot.val());\r\n          //  } else {\r\n          //      postsRef.push({\r\n          //        gall_id: idboard,\r\n          //        wr_11: gall_no,\r\n          //        wr_datetime: Date.now(),\r\n          //      });              \r\n          //     console.log(\"push!\", snapshot.val());\r\n          //  }\r\n          //});\r\n        });  \r\n      }\r\n      fetchData();\r\n    }, [idboard]);\r\n    return (\r\n      <div>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction ClientsDisplay() {\r\n    \r\n  const [clients, setClients] = useState([])\r\n\r\n  useEffect(() => {\r\n    const postsRef = db.ref(\"board\");\r\n      \r\n      const handleChildAdded = (snapshot) => {\r\n          const client = snapshot.val()\r\n          client.key = snapshot.key\r\n          setClients(clients => [...clients, client]);\r\n          console.log(\"child_added-> \"+client.key + \" \" + snapshot.key +\" \"+snapshot.val().msg);\r\n      }\r\n      const handleChildRemoved = snapshot => {\r\n          setClients(clients => clients.filter(client => client.key !== snapshot.key));\r\n          console.log(\"removed tasks(msg.key): \" + snapshot.key);\r\n      };\r\n      postsRef.limitToLast(40).on(\"child_added\", handleChildAdded)\r\n      postsRef.on(\"child_removed\", handleChildRemoved)      \r\n      return () => {\r\n        postsRef.off('child_added', handleChildAdded)\r\n        postsRef.off(\"child_removed\", handleChildRemoved)  \r\n      }\r\n  }, [])\r\n\r\n  return (\r\n      <div>\r\n        <table>\r\n          {console.log(\"dongname render\")}\r\n          {clients.reverse().map(iddata => ( \r\n            <tr>\r\n              <td>{iddata.key}</td><td>{iddata.wr_11}</td><td>{moment(iddata.wr_datetime).format('LTS')}</td>  \r\n            </tr>\r\n          ))}\r\n          </table>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Board;","import React from 'react';\nimport { HashRouter, Route, Switch, Link } from 'react-router-dom';\nimport Home from './Home';\nimport Board from './board';\n\nconst App = () => {\n  return (\n    <HashRouter>\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/\">홈</Link> {/* Link로 새로 고침안된다 */}\n        </li>\n        <li>\n          <Link to={{\n            pathname: \"/board/ib_new1\",\n            id: \"ib_new1\"\n          }}\n            >인터넷방송</Link>\n        </li>\n      </ul>\n      <hr />\n    \t<Switch>\n        <Route path=\"/\" exact={true} component={Home} /> {/* exact / 일때만 표시* */}\n        <Route path=\"/board/:id\" component={Board} />\n      </Switch>\n    </div>\n    </HashRouter>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'; // * BrowserRouter 불러오기\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// * App 을 BrowserRouter 로 감싸기\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}