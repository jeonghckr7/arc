{"version":3,"sources":["Home.js","View.js","ib_new1.js","App.js","serviceWorker.js","index.js"],"names":["Home","viewData","1","name","description","2","View","no","match","params","view","Ib_new1","path","component","to","exact","render","App","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNAWeA,EATF,WACX,OACE,6BACE,sCACA,0JCHAC,EAAW,CACfC,EAAG,CACDC,KAAM,qBACNC,YACE,sHAEJC,EAAG,CACDF,KAAM,qBACNC,YAAa,sDAqBFE,EAjBF,SAAC,GAAe,IAEnBC,EAFkB,EAAZC,MAEOC,OAAbF,GACFG,EAAOT,EAASM,GACtB,OAAKG,EAIH,6BACE,4BACGH,EADH,IACQG,EAAKP,KADb,KAGA,2BAAIO,EAAKN,cAPJ,uGCSIO,EAzBC,WACd,OACE,6BACE,8DAEA,kBAAC,IAAD,CAAOC,KAAK,eAAeC,UAAWP,IAEtC,4BACE,4BACE,kBAAC,IAAD,CAAMQ,GAAG,cAAT,aAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,cAAT,aAIJ,kBAAC,IAAD,CACEF,KAAK,WACLG,OAAK,EACLC,OAAQ,kBAAM,8FCIPC,EAtBH,WACV,OACE,kBAAC,IAAD,KACA,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMH,GAAG,KAAT,UADF,KAGA,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,oCAGJ,6BACD,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOF,KAAK,IAAIG,OAAO,EAAMF,UAAWb,IAD3C,IAEG,kBAAC,IAAD,CAAOY,KAAK,WAAWC,UAAWF,QCRtBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCVNc,IAASN,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFO,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d09addf5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <h1>홈</h1>\r\n      <p>이곳은 홈이에요. 가장 먼저 보여지는 페이지죠.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\n\r\n// 프로필에서 사용 할 데이터\r\nconst viewData = {\r\n  1: {\r\n    name: '김민준',\r\n    description:\r\n      'Frontend Engineer @ Laftel Inc. 재밌는 것만 골라서 하는 개발자'\r\n  },\r\n  2: {\r\n    name: '홍길동',\r\n    description: '전래동화의 주인공'\r\n  }\r\n};\r\n\r\nconst View = ({ match }) => {\r\n  // 파라미터를 받아올 땐 match 안에 들어있는 params 값을 참조합니다.\r\n  const { no } = match.params;\r\n  const view = viewData[no];\r\n  if (!view) {\r\n    return <div>존재하지 않는 유저입니다.</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <h3>\r\n        {no}({view.name})\r\n      </h3>\r\n      <p>{view.description}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default View;","import React from 'react';\r\nimport { Link, Route } from 'react-router-dom';\r\nimport View from './View';\r\n\r\nconst Ib_new1 = () => {\r\n  return (\r\n    <div>\r\n      <h3>인터넷방송</h3>\r\n      \r\n      <Route path=\"/ib_new1/:no\" component={View} />\r\n\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/ib_new1/1\">velopert</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/ib_new1/2\">gildong</Link>\r\n        </li>\r\n      </ul>\r\n\r\n      <Route\r\n        path=\"/ib_new1\"\r\n        exact\r\n        render={() => <div>유저를 선택해주세요.</div>}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ib_new1;","import React from 'react';\nimport { HashRouter, Route, Switch, Link } from 'react-router-dom';\nimport Home from './Home';\nimport Ib_new1 from './ib_new1';\n\nconst App = () => {\n  return (\n    <HashRouter>\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/\">홈</Link> {/* Link로 새로 고침안된다 */}\n        </li>\n        <li>\n          <Link to=\"/ib_new1\">인터넷방송</Link>\n        </li>\n      </ul>\n      <hr />\n    \t<Switch>\n        <Route path=\"/\" exact={true} component={Home} /> {/* exact / 일때만 표시* */}\n        <Route path=\"/ib_new1\" component={Ib_new1} />\n      </Switch>\n    </div>\n    </HashRouter>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'; // * BrowserRouter 불러오기\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// * App 을 BrowserRouter 로 감싸기\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}