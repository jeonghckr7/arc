{"version":3,"sources":["Home.js","View.js","firebase.js","board.js","App.js","serviceWorker.js","index.js"],"names":["Home","viewData","1","name","description","2","View","no","match","params","view","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","sdb","database","firestore","st","storage","NoIdBoard","id","postsRef","collection","doc","axios","get","cors_api_url","then","iresult","html","data","wr_content","exec","replace","imgrepl","reple","reg_repl","repl","console","log","table","push","imgorgs","orgs","reg_orgs","ogs","imgorgsor","split","$","cheerio","load","opimage_array","attr","imgsrcs","wr_subject","text","mb_id","eq","igs","reg_imgsrc","wcount","imgsrcs_org","imgsrcs_array","imgsrcsr","rep","imgs","imgscr","ogsname","igspromises","map","aximgsrcs","Promise","resolve","reject","encodeURIComponent","method","responseType","xsrfCookieName","xsrfHeaderName","headers","response","contentDisposition","contentLength","filter","str","includes","fileNameMatch","splitfilename","streffile","ref","child","getDownloadURL","downloadURL","resrep","resimgsrcs","getdurl","catch","error","code","uploadTask","put","on","snapshot","percent","bytesTransferred","totalBytes","getimgdownurl","all","values","forEach","value","add","gall_id","wr_1","wr_2","Date","now","wr_datetime","snap","status","IdBoard","idboard","postsdcRef","orderBy","limit","empty","datetime","docData","secondsElapsed","moment","diff","delete","result","counteach","find","each","i","gall_no","children","trim","where","useState","axclients","reverse","axiddata","index","key","format","Board","history","location","useLocation","queryString","parse","search","path","component","to","url","exact","render","window","substring","App","pathname","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b6e1f597.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <h1>홈</h1>\r\n      <p>이곳은 홈이에요. 가장 먼저 보여지는 페이지죠.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\n\r\n// 프로필에서 사용 할 데이터\r\nconst viewData = {\r\n  1: {\r\n    name: '김민준',\r\n    description:\r\n      'Frontend Engineer @ Laftel Inc. 재밌는 것만 골라서 하는 개발자'\r\n  },\r\n  2: {\r\n    name: '홍길동',\r\n    description: '전래동화의 주인공'\r\n  }\r\n};\r\n\r\nconst View = ({ match }) => {\r\n  // 파라미터를 받아올 땐 match 안에 들어있는 params 값을 참조합니다.\r\n  const { no } = match.params;\r\n  const view = viewData[no];\r\n  if (!view) {\r\n    return <div>존재하지 않는 유저입니다.</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <h3>\r\n        {no}({view.name})\r\n      </h3>\r\n      <p>{view.description}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default View;","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBLHYeag273-F8L_funDb_8iUZO7BGZZW8\",\r\n    authDomain: \"chat-app-55e32.firebaseapp.com\",\r\n    databaseURL: \"https://chat-app-55e32.firebaseio.com\",\r\n    projectId: \"chat-app-55e32\",\r\n    storageBucket: \"chat-app-55e32.appspot.com\",\r\n    messagingSenderId: \"485337347226\",\r\n    appId: \"1:485337347226:web:04974d75cec0bcef055b23\",\r\n    measurementId: \"G-E3QSED8X11\"\r\n};\r\n\r\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\r\nexport const db = firebaseApp.database();\r\nexport const sdb = firebaseApp.firestore();\r\nexport const st = firebaseApp.storage();","import React, { useState, useEffect } from 'react';\r\nimport { Link, Route, useLocation } from 'react-router-dom';\r\nimport View from './View';\r\nimport { st, sdb, db, firebaseApp } from './firebase';\r\nimport axios from 'axios';\r\nimport cheerio from 'cheerio';\r\nimport moment from 'moment';\r\nimport queryString from 'query-string';\r\n\r\nconst Board = ({ match, history }) => {\r\n  const {id} = match.params;\r\n  const location = useLocation();\r\n\r\n  console.log(queryString.parse(location.search));\r\n\r\n  return (\r\n    <div>\r\n      <h3>{id}</h3>\r\n      \r\n      <Route path={`${match.path}/:no`} component={View} />\r\n\r\n      <ul>\r\n        {/*{viewData.map(({ id, name }) => (\r\n          <li key={id}>\r\n            <Link to={`${match.url}/${id}`}>{name}</Link>\r\n          </li>\r\n        ))}\r\n        */}\r\n        <li>\r\n          <Link to={`${match.url}/1`}>velopert</Link>\r\n        </li>\r\n        <li>\r\n          <Link to={`${match.url}/2`}>gildong</Link>\r\n          link state로 넘겨준 id 값은 {id}\r\n        </li>\r\n      </ul>\r\n\r\n      <Route\r\n        path=\"/ib_new1\"\r\n        exact\r\n        render={() => <div>유저를 선택해주세요.</div>}\r\n      />\r\n\r\n        <IdBoard id={id}/>\r\n        {/*<ClientsDisplay id={id}/>*/}\r\n        {window.location.search.substring(1)}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction getimgdownurl(aximgsrcs, id) {\r\n  return new Promise(( resolve, reject )=>{\r\n    var cors_api_host = 'cors-anywhere.herokuapp.com';\r\n    var cors_api_url = 'https://' + cors_api_host + '/';\r\n    var furl = cors_api_url + 'http://3.208.68.247/flask?url=';\r\n    console.table(aximgsrcs);\r\n    axios.get(furl + encodeURIComponent(aximgsrcs.imgscr), {\r\n      method: 'GET',\r\n      responseType: 'blob',     \r\n      xsrfCookieName: 'XSRF-TOKEN',\r\n      xsrfHeaderName: 'X-XSRF-TOKEN',\r\n      headers: {\r\n        'Access-Control-Allow-Headers': 'x-requested-with, x-requested-by',\r\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36'\r\n                },\r\n    }).then((response) => {\r\n      const contentDisposition = response.headers['content-disposition']; // 파일 이름\r\n      const contentLength = response.headers['content-length']; // 파일 이름\r\n      \r\n      if (contentDisposition) {\r\n        const [ fileNameMatch ] = contentDisposition.split(';').filter(str => str.includes('filename'));\r\n        if (fileNameMatch) {\r\n          var splitfilename = fileNameMatch.split('=');\r\n          splitfilename = splitfilename[1].split('.');\r\n          splitfilename = aximgsrcs.ogsname+\"_\"+ contentLength+\".\"+splitfilename[1];\r\n          console.log(\"contentLength: \" +contentLength+ \" splitfilename: \" +  splitfilename);\r\n          \r\n          var streffile = st.ref(id).child(splitfilename);\r\n          streffile.getDownloadURL().then(function(downloadURL) {\r\n            resolve({resrep: aximgsrcs.rep, resimgsrcs: aximgsrcs.imgs, getdurl: downloadURL});\r\n          }).catch(function(error) {\r\n            console.log(error.code);\r\n            if (error.code === 'storage/object-not-found') {\r\n                console.log(\"파일이 없네요?\" + error.code);\r\n\r\n                var uploadTask = streffile.put(response.data);\r\n                uploadTask.on('state_changed', function(snapshot){\r\n                  var percent = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                  console.log(percent + \"% done\");\r\n                }, function(error) {\r\n                  console.table(error);\r\n                  // Handle unsuccessful uploads \r\n                }, function() {\r\n                  // Handle successful uploads on complete\r\n                  // For instance, get the download URL: https://firebasestorage.googleapis.com/...\r\n                  uploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL) {\r\n                    console.log(\"파일을 다운 받았네요?\" + downloadURL);\r\n                    resolve({resrep: aximgsrcs.rep, resimgsrcs: aximgsrcs.imgs, getdurl: downloadURL});\r\n                  });\r\n                });\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n    })\r\n  })\r\n}\r\n\r\nfunction NoIdBoard(id, no) {\r\n  const postsRef = sdb.collection('board').doc(id).collection('data');\r\n  \r\n  //alert(\"idboard: \" + id+ \"noidboard: \" + no + \"newPostKey\" + newPostKey);\r\n  \r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    var cors_api_url = 'https://cors-anywhere.herokuapp.com/';\r\n    axios.get(cors_api_url + 'https://gall.dcinside.com/board/view/?id=' + id + '&no=' + no +'&exception_mode=recommend')\r\n    .then(function(iresult) {\r\n      const html = iresult.data;\r\n\r\n      var patternwrcontent = /<div style=\"overflow[\\s\\S]*?([^<]+?)본문 우측/i;\r\n\r\n      var wr_content = patternwrcontent.exec(html);\r\n      wr_content = wr_content[0].replace('<div style=\"overflow:hidden;\">', ''); \r\n      wr_content = wr_content.replace('본문 우측', '');\r\n\r\n      //console.log(\"wr_content :\" + wr_content);\r\n\r\n      var patternrepl = /<div style=\"overflow[\\s\\S]*?([^<]+?)본문 우측 광고/i;\r\n      var reple = patternrepl.exec(html);\r\n      var reg_repl = /(<video autoplay loop muted onmousedown=\"mp4_overlay\\(this, 'https:\\/\\/dcimg(.*?)'|<img src=\"https:\\/\\/dcimg(.*?)\")/g;\r\n      var imgrepl; \r\n      const repl = [];\r\n      while((imgrepl = reg_repl.exec(reple)) !== null) {\r\n        console.log(\"imgrepl\");\r\n        console.table(imgrepl);  \r\n        repl.push(imgrepl[0]);\r\n        //console.log(\"imgrepl\" + imgrepl);\r\n      }\r\n      console.table(repl);\r\n\r\n      var patternorg = /원본[\\s\\S]*?([^<]+?)<\\/div>/i;\r\n      var orgs = patternorg.exec(html);\r\n      var reg_orgs = /<li><a href=\"[^>]*>([^<]*)<\\/a>/g;\r\n      var imgorgs; \r\n      const ogs = [];\r\n      while((imgorgs = reg_orgs.exec(orgs)) !== null) {\r\n        var imgorgs_array = imgorgs[1].split('.');\r\n        var imgorgsor = imgorgs_array[0];\r\n        ogs.push(imgorgsor);\r\n        console.log(\"imgorgsor\" + imgorgsor);\r\n      }\r\n      //var reg_imgsrc = /<img.*?src=\"(.*?)\"/g;\r\n      //var reg_imgsrc = /<img src=\"\\S+(?:dcimg)\\S+\"/g;\r\n      \r\n      var $ = cheerio.load(html);\r\n\r\n      var opimage = $(\"meta[property='og:image']\").attr(\"content\");\r\n      var opimage_array = opimage.split('&');\r\n      console.log(\"array \" + opimage_array[0]);\r\n      \r\n      var wr_subject = $(\"span.title_subject\").text();\r\n      var mb_id = $(\"span.nickname\").eq(0).text();\r\n\r\n      const igs = [];\r\n      \r\n      var reg_imgsrc = /<a href=\"https:\\/\\/image.dcinside\\S+\"/g;\r\n      var imgsrcs;\r\n      var wcount = 0;\r\n      while((imgsrcs = reg_imgsrc.exec(orgs)) !== null) {\r\n        //console.table(imgsrcs);\r\n        var imgsrcs_org = imgsrcs[0].split('\"');\r\n        imgsrcs_org = imgsrcs_org[1];\r\n        var imgsrcs_array = imgsrcs_org.split('?');\r\n        var imgsrcsr = opimage_array[0] + \"&\" + imgsrcs_array[1];\r\n        //console.log({imgsrc: imgsrcsr})\r\n        //igs.push(imgsrcsr);\r\n        console.log(\"opimage_array \" + opimage_array[0] + \"imgsrcsr->\" + imgsrcs_array[1])\r\n        console.log(\"imgsrcsr \" + imgsrcsr);\r\n      //  igs.push({imgs:imgsrcs_org ,imgscr: imgsrcsr, ogsname: ogs[wcount]});\r\n      \r\n        igs.push({rep:repl[wcount], imgs:imgsrcs_org ,imgscr: imgsrcsr, ogsname: ogs[wcount]});\r\n        wcount++;\r\n      }\r\n      console.table(igs);\r\n  \r\n      \r\n      const igspromises = igs.map(aximgsrcs => \r\n          getimgdownurl(aximgsrcs, id)\r\n      );\r\n      \r\n      \r\n      Promise.all(igspromises)\r\n      .then(values => {\r\n        values.forEach(function (value) {\r\n          console.table(value);\r\n          \r\n          wr_content = wr_content.replace(value.resrep, \"<img src=\"+value.getdurl+\">\"+value.resrep);\r\n          wr_content = wr_content.replace(value.resimgsrcs,\"\" );\r\n          //wr_content = wr_content.replace(value.resimgsrcs,value.getdurl);\r\n        });\r\n        \r\n        postsRef.add({\r\n          gall_id: id,\r\n          wr_1: no,\r\n          wr_2: Date.now(),\r\n          wr_datetime: Date.now(),\r\n          wr_subject: wr_subject,\r\n          mb_id: mb_id,\r\n          wr_content: wr_content\r\n        })\r\n        .then(function(snap) {\r\n          console.log(\"snap.data() add id: \" + snap.id);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n\r\n        /*var postData = {\r\n          wr_subject: wr_subject,\r\n          mb_id: mb_id,\r\n          wr_content: wr_content,\r\n          wr_datetime: Date.now(),\r\n          uid: docid\r\n        };\r\n        postsRef.doc(docid).update(postData)\r\n        .then(() => {\r\n          console.log(\"updated id!: \"+docid);\r\n        });\r\n        */\r\n\r\n      });\r\n      \r\n    }).catch(function (error) {\r\n      if (error.response) {\r\n        console.error(\"404 에러냐? \"+ error.response.status);\r\n        if (error.response === \"404\") {\r\n          //postsRef.doc(docid).delete()\r\n          //.then(() => {\r\n          //  console.log(\"delete id-> \" + docid);\r\n          //})\r\n        }\r\n      }\r\n    });\r\n  return (\r\n    <div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction IdBoard(id) {\r\n  const idboard = id.id;\r\n  console.log(\"IdBoard boardid: \" + idboard);\r\n\r\n  const postsRef = sdb.collection('board').doc(idboard).collection('data');\r\n  \r\n    function fetchData() {\r\n      // eslint-disable-next-line react-hooks/rules-of-hooks\r\n      var cors_api_url = 'https://cors-anywhere.herokuapp.com/';\r\n      \r\n      axios.get(cors_api_url + 'https://gall.dcinside.com/board/lists/?id=' + idboard + '&exception_mode=recommend')\r\n      .then(function(result) {\r\n        console.log(\"axios\")\r\n        const html = result.data;\r\n        const $ = cheerio.load(html);\r\n\r\n        var counteach = 0;\r\n        var results = $('table.gall_list').find('tr.us-post')\r\n        results.each(function (i, result) {\r\n          var gall_no = $(result).children('td.gall_num').text().trim();\r\n            postsRef.where('wr_1', '==', gall_no).limit(1).get()\r\n            .then((snapshot) => {\r\n              console.log(idboard + \" \"+ gall_no);\r\n              if (snapshot.empty) {\r\n                if (counteach > 0) { return; }\r\n                  counteach++;\r\n                  console.log(\"conteach: \" + counteach)\r\n                  NoIdBoard(idboard,gall_no);\r\n                  /*postsRef.add({\r\n                    gall_id: idboard,\r\n                    wr_1: gall_no,\r\n                    wr_2: Date.now(),\r\n                    wr_datetime: '',\r\n                    wr_subject: '',\r\n                    mb_id: '',\r\n                    wr_content: '',\r\n                    uid: ''\r\n                  })\r\n                  .then(function(snap) {\r\n                    console.log(\"snap.data() new id: \" + snap.id);\r\n                    NoIdBoard(idboard,gall_no,snap.id);\r\n                  })\r\n                  .catch((error) => {\r\n                    console.log(error);\r\n                  });\r\n                  */\r\n              } else {\r\n                snapshot.forEach(doc => {\r\n                  console.log(\"똑같은게 있네요?\" + doc.id, '=>',  doc.data());\r\n                });\r\n              }\r\n            })\r\n            .catch(function (error) {\r\n              if (error.response) {\r\n              }\r\n            });\r\n        });\r\n      }).catch(function (error) {\r\n        if (error.response) {\r\n          //console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          //console.log(error.response.headers);\r\n        }\r\n      });\r\n    \r\n    }\r\n\r\n    const postsdcRef = sdb.collection('boarddc');\r\n    \r\n    postsdcRef.orderBy(\"datetime\", \"desc\").limit(1).get()\r\n    .then(snapshot => {\r\n      if (snapshot.empty) {\r\n        postsdcRef.add({\r\n          gall_id: idboard,\r\n          datetime: Date.now(),\r\n        })\r\n      } else {\r\n        snapshot.forEach(doc => {\r\n          console.log(doc.id, '=>', doc.data());\r\n          var docData = doc.data();\r\n          let secondsElapsed = moment().diff(docData.datetime, 'seconds');\r\n          console.log(secondsElapsed+ \" 초가 지났습니다.\")\r\n          if (secondsElapsed > 60) {\r\n            postsdcRef.add({\r\n              gall_id: idboard,\r\n              datetime: Date.now(),\r\n            })\r\n            .then(snap => { \r\n              console.log(\"conn newPost id: \" + snap.id); \r\n              postsdcRef.doc(doc.id).delete()\r\n              .then(() => {\r\n                console.log(\"delete id-> \" + doc.id);\r\n                fetchData();\r\n              })\r\n            })\r\n            .catch((error) => { console.log(error);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    const [axclients, setaxClients] = useState([])\r\n    //useEffect(() => {\r\n    //  const posts = postsRef.orderBy(\"wr_2\", \"desc\").limit(1).onSnapshot(snap => {\r\n        \r\n    //    snap.forEach(doc => {\r\n    //        setaxClients(axclients => [...axclients, doc.data()]);\r\n    //    });\r\n    //  });\r\n\r\n    //  return () => posts()\r\n      \r\n    //},[]);\r\n\r\n    return (\r\n      <div>\r\n\r\n        <table>\r\n          <tbody>\r\n            {console.log(\"ax render\")}\r\n            {axclients.reverse().map((axiddata, index) => ( \r\n              <tr key={index}>\r\n                <td>{axiddata.id}</td><td>datetime:{axiddata.wr_2}</td><td>{moment(axiddata.wr_2).format('h:mm:ss')}</td><td>wr_1:{axiddata.wr_1}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction ClientsDisplay(id) {\r\n    \r\n  const [clients, setClients] = useState([])\r\n\r\n  useEffect(() => {\r\n    const idboard = id.id;\r\n  \r\n    const postsRef = sdb.ref(\"board\");\r\n      \r\n      const handleChildAdded = (snapshot) => {\r\n          const client = snapshot.val()\r\n          client.key = snapshot.key\r\n          setClients(clients => [...clients, client]);\r\n          //console.log(\"child_added-> \"+client.key + \" \" + snapshot.key +\" \"+snapshot.val().msg);\r\n      }\r\n      const handleChildRemoved = snapshot => {\r\n          setClients(clients => clients.filter(client => client.key !== snapshot.key));\r\n          console.log(\"removed tasks(msg.key): \" + snapshot.key);\r\n      };\r\n      postsRef.orderByChild(\"wr_datetime\").limitToLast(20).on(\"child_added\", handleChildAdded)\r\n      postsRef.on(\"child_removed\", handleChildRemoved)      \r\n      return () => {\r\n        postsRef.off('child_added', handleChildAdded)\r\n        postsRef.off(\"child_removed\", handleChildRemoved)  \r\n      }\r\n  }, [])\r\n\r\n  return (\r\n      <div>\r\n        <table>\r\n          <tbody>\r\n            {console.log(\"dongname render\")}\r\n            {clients.reverse().map((iddata, index) => ( \r\n              <tr key={index}>\r\n                <td>{iddata.key}</td><td>{iddata.wr_2}</td><td>{moment(iddata.wr_datetime).format('LTS')}</td>  \r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Board;","import React from 'react';\nimport { HashRouter, Route, Switch, Link } from 'react-router-dom';\nimport Home from './Home';\nimport Board from './board';\n\nconst App = () => {\n  return (\n    <HashRouter>\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/\">홈</Link> {/* Link로 새로 고침안된다 */}\n        </li>\n        <li>\n          <Link to={{\n            pathname: \"/board/ib_new1\",\n            id: \"ib_new1\"\n          }}\n            >인터넷방송</Link>\n        </li>\n        <li>\n          <Link to={{\n            pathname: \"/board/baseball_new8\",\n            id: \"baseball_new8\"\n          }}\n            >국내야구</Link>\n        </li>\n      </ul>\n      <hr />\n    \t<Switch>\n        <Route path=\"/\" exact={true} component={Home} /> {/* exact / 일때만 표시* */}\n        <Route path=\"/board/:id\" component={Board} />\n      </Switch>\n    </div>\n    </HashRouter>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'; // * BrowserRouter 불러오기\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// * App 을 BrowserRouter 로 감싸기\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}